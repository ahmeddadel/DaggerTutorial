package com.dolla.daggertutorialhamalawy;

import android.os.Bundle;
import android.util.Log;

import androidx.appcompat.app.AppCompatActivity;

import com.dolla.daggertutorialhamalawy.autoDI.Coffee;
import com.dolla.daggertutorialhamalawy.autoDI.DaggerICoffeeComponent;
import com.dolla.daggertutorialhamalawy.autoDI.ICoffeeComponent;

import javax.inject.Inject;

public class MainActivity extends AppCompatActivity {

    @Inject // this annotation is used to tell Dagger that this is a dependency that needs to be injected
    Coffee coffee; // field injection (must be public and not private)

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

//        // Manual Dependency Injection (Boilerplate code)
//        Farm farm = new Farm();
//        River river = new River();
//        Coffee coffee = new Coffee(farm, river);


//    ====================================================================================================


//        // Auto Dependency Injection (No boilerplate code)
//        ICoffeeComponent coffeeComponent = DaggerICoffeeComponent.create(); // DaggerICoffeeComponent is generated by Dagger from ICoffeeComponent interface.
//        coffeeComponent.getCoffee(); // getCoffee() is generated by Dagger from ICoffeeComponent interface.


//    ====================================================================================================


//        // Auto Dependency Injection (No boilerplate code)
//        ICoffeeComponent coffeeComponent = DaggerICoffeeComponent.create(); // DaggerICoffeeComponent is generated by Dagger from ICoffeeComponent interface.
//
//        Log.d("Dola",
//                coffeeComponent.getCoffee().getCoffeeCup() // getCoffee() is generated by Dagger from ICoffeeComponent interface.
//        );


//    ====================================================================================================


//        // Auto Dependency Injection (No boilerplate code)
//        ICoffeeComponent coffeeComponent = DaggerICoffeeComponent.create(); // DaggerICoffeeComponent is generated by Dagger from ICoffeeComponent interface.
//
//        coffeeComponent.inject(this); // inject() is generated by Dagger from ICoffeeComponent interface.
//
//        Log.d("Dola",
//                coffee.getCoffeeCup() // getCoffee() is generated by Dagger from ICoffeeComponent interface.
//        );


//    ====================================================================================================


//        // Auto Dependency Injection (No boilerplate code)
//        ICoffeeComponent coffeeComponent = DaggerICoffeeComponent // DaggerICoffeeComponent is generated by Dagger from ICoffeeComponent interface.
//                .builder() // builder() is used to build the component with modules.
//                .coffeeModule(new CoffeeModule(5)) // coffeeModule() is used to add modules to the component.
//                .build(); // build() is used to build the component.
//
//        coffeeComponent.inject(this); // inject() is generated by Dagger from ICoffeeComponent interface.
//
//        Log.d("Dola",
//                coffee.getCoffeeCup() // getCoffee() is generated by Dagger from ICoffeeComponent interface.
//        );


//    ====================================================================================================


        // Auto Dependency Injection (No boilerplate code)
        ICoffeeComponent coffeeComponent = DaggerICoffeeComponent // DaggerICoffeeComponent is generated by Dagger from ICoffeeComponent interface.
                .builder() // builder() is used to build the component with modules.
                .sugarSpoons(50) // sugarSpoons() is used to add modules to the component.
                .milkScoops(10) // milkScoops() is used to add modules to the component.
                .build(); // build() is used to build the component.

        coffeeComponent.inject(this); // inject() is generated by Dagger from ICoffeeComponent interface.

        Log.d("Dola",
                coffee.getCoffeeCup() // getCoffee() is generated by Dagger from ICoffeeComponent interface.
        );

    }
}